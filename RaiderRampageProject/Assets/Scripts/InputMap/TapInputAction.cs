//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Scripts/InputMap/TapInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TapInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TapInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TapInputAction"",
    ""maps"": [
        {
            ""name"": ""TapActionMap"",
            ""id"": ""c0d1f3c0-a425-491b-87a2-3c28a81bb8a7"",
            ""actions"": [
                {
                    ""name"": ""TapInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""12a1563c-1d21-438e-88ef-8f0d1397a506"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6987a986-82e1-4ef2-97b9-8ccd218dfcc7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4c2243fa-51e1-45e5-8346-c9ee5225ba06"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f8da880-e038-42a4-aa88-b96017e6d0fd"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TapActionMap
        m_TapActionMap = asset.FindActionMap("TapActionMap", throwIfNotFound: true);
        m_TapActionMap_TapInput = m_TapActionMap.FindAction("TapInput", throwIfNotFound: true);
        m_TapActionMap_TapPosition = m_TapActionMap.FindAction("TapPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TapActionMap
    private readonly InputActionMap m_TapActionMap;
    private ITapActionMapActions m_TapActionMapActionsCallbackInterface;
    private readonly InputAction m_TapActionMap_TapInput;
    private readonly InputAction m_TapActionMap_TapPosition;
    public struct TapActionMapActions
    {
        private @TapInput m_Wrapper;
        public TapActionMapActions(@TapInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TapInput => m_Wrapper.m_TapActionMap_TapInput;
        public InputAction @TapPosition => m_Wrapper.m_TapActionMap_TapPosition;
        public InputActionMap Get() { return m_Wrapper.m_TapActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TapActionMapActions set) { return set.Get(); }
        public void SetCallbacks(ITapActionMapActions instance)
        {
            if (m_Wrapper.m_TapActionMapActionsCallbackInterface != null)
            {
                @TapInput.started -= m_Wrapper.m_TapActionMapActionsCallbackInterface.OnTapInput;
                @TapInput.performed -= m_Wrapper.m_TapActionMapActionsCallbackInterface.OnTapInput;
                @TapInput.canceled -= m_Wrapper.m_TapActionMapActionsCallbackInterface.OnTapInput;
                @TapPosition.started -= m_Wrapper.m_TapActionMapActionsCallbackInterface.OnTapPosition;
                @TapPosition.performed -= m_Wrapper.m_TapActionMapActionsCallbackInterface.OnTapPosition;
                @TapPosition.canceled -= m_Wrapper.m_TapActionMapActionsCallbackInterface.OnTapPosition;
            }
            m_Wrapper.m_TapActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TapInput.started += instance.OnTapInput;
                @TapInput.performed += instance.OnTapInput;
                @TapInput.canceled += instance.OnTapInput;
                @TapPosition.started += instance.OnTapPosition;
                @TapPosition.performed += instance.OnTapPosition;
                @TapPosition.canceled += instance.OnTapPosition;
            }
        }
    }
    public TapActionMapActions @TapActionMap => new TapActionMapActions(this);
    public interface ITapActionMapActions
    {
        void OnTapInput(InputAction.CallbackContext context);
        void OnTapPosition(InputAction.CallbackContext context);
    }
}
